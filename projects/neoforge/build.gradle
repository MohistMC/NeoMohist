import net.neoforged.jarcompatibilitychecker.gradle.JCCPlugin
import net.neoforged.jarcompatibilitychecker.gradle.CompatibilityTask
import net.neoforged.jarcompatibilitychecker.gradle.ProvideNeoForgeJarTask


plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.jarcompatibilitychecker' version '0.1.12'
    id 'net.neoforged.gradleutils'
}

apply plugin : net.neoforged.neodev.NeoDevPlugin

// Because of the source set reference.
evaluationDependsOn(":neoforge-coremods")

gradleutils.setupSigning(project: project, signAllPublications: true)

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}

final checkVersion = JCCPlugin.providePreviousVersion(
        project.providers, project.providers.provider({['https://maven.neoforged.net/releases']}), project.providers.provider({'net.neoforged:neoforge'}),
        project.provider { project.version }.map { ver -> CompatibilityTask.VersionComponentTest.MINOR.predicate(ver) }
)
final createCompatJar = tasks.register('createCompatibilityCheckJar', ProvideNeoForgeJarTask) {
    // Use the same jar that the patches were generated against
    cleanJar.set(tasks.generateClientBinPatches.cleanJar)
    maven.set('https://maven.neoforged.net/releases')
    artifact.set('net.neoforged:neoforge')
    version.set(checkVersion)
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(java_version)
    }
}
checkJarCompatibility {
    isAPI = true
    baseJar = createCompatJar.flatMap { it.output }
}

neoDev {
    mods {
        minecraft {
            sourceSet sourceSets.main
        }
        "neoforge-coremods" {
            sourceSet project(":neoforge-coremods").sourceSets.main
        }
    }
}

tasks.configureEach { tsk ->
    if (tsk.name == 'neoFormApplyUserAccessTransformer' && project.hasProperty('validateAccessTransformers')) {
        tsk.inputs.property('validation', 'error')
        tsk.logLevel('ERROR')
        tsk.doFirst {
            tsk.getRuntimeProgramArguments().addAll(tsk.getRuntimeProgramArguments().get())
            tsk.getRuntimeProgramArguments().add('--access-transformer-validation=error')
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}

dependencies {

    neoFormData("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform'
        }
        endorseStrictVersions()
    }
    neoFormDependencies("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform-dependencies'
        }
        endorseStrictVersions()
    }

    moduleLibraries "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    for (var asmModule : ["org.ow2.asm:asm", "org.ow2.asm:asm-commons", "org.ow2.asm:asm-tree", "org.ow2.asm:asm-util", "org.ow2.asm:asm-analysis"]) {
        moduleLibraries(asmModule) {
            // Vanilla ships with ASM 9.3 transitively (via their OpenID connect library dependency), we require
            // ASM in a more recent version and have to strictly require this to override the strict Minecraft version.
            version {
                strictly project.asm_version
            }
        }
    }
    moduleLibraries "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"
    moduleLibraries "net.neoforged:JarJarFileSystems:${project.jarjar_version}"

    libraries ("net.neoforged.fancymodloader:loader:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
        exclude group: 'net.fabricmc'
    }
    libraries ("net.neoforged.fancymodloader:earlydisplay:${project.fancy_mod_loader_version}") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.slf4j'
        exclude group: 'net.fabricmc'
    }
    libraries "net.neoforged:accesstransformers:${project.accesstransformers_version}"
    libraries "net.neoforged:bus:${project.eventbus_version}"
    libraries "net.neoforged:coremods:${project.coremods_version}"
    libraries "cpw.mods:modlauncher:${project.modlauncher_version}"
    libraries "net.neoforged:mergetool:${project.mergetool_version}:api"
    libraries "com.electronwill.night-config:core:${project.nightconfig_version}"
    libraries "com.electronwill.night-config:toml:${project.nightconfig_version}"
    libraries "org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}"
    libraries "net.jodah:typetools:${project.typetools_version}"
    libraries "net.minecrell:terminalconsoleappender:${project.terminalconsoleappender_version}"
    libraries("net.fabricmc:sponge-mixin:${project.mixin_version}") { transitive = false }
    libraries "org.openjdk.nashorn:nashorn-core:${project.nashorn_core_version}"
    libraries ("net.neoforged:JarJarSelector:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    // We depend on apache commons directly as there is a difference between the version the server uses and the one the client does
    libraries "org.apache.commons:commons-lang3:${project.apache_commons_lang3_version}"
    libraries ("net.neoforged:JarJarMetadata:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

    userdevTestFixtures("net.neoforged.fancymodloader:junit-fml:${project.fancy_mod_loader_version}") {
        endorseStrictVersions()
    }

    // Must be implementation instead of compileOnly so that running dependent projects such as tests will trigger (re)compilation of coremods.
    // (Only needed when compiling through IntelliJ non-delegated builds - otherwise `compileOnly` would work).
    implementation(jarJar(project(":neoforge-coremods")))

    // craftbukkit
    libraries 'org.fusesource.jansi:jansi:2.4.1'
    implementation 'jline:jline:2.14.6'
    libraries 'com.googlecode.json-simple:json-simple:1.1.1'
    libraries 'org.xerial:sqlite-jdbc:3.46.0.0'
    libraries 'com.mysql:mysql-connector-j:8.4.0'
    libraries 'net.md-5:SpecialSource:1.11.2'
    libraries 'org.yaml:snakeyaml:2.0'
    // spigot
    libraries 'net.md-5:bungeecord-chat:1.20-R0.2' // #65
    libraries 'commons-codec:commons-codec:1.16.0'
    libraries 'net.sf.jopt-simple:jopt-simple:5.0.4'

    implementation 'io.izzel:tools:1.3.0'
    implementation 'com.mohistmc:dynamicenum:0.3.1'
    implementation 'com.mohistmc:i18n:0.6'
    implementation 'com.mohistmc:json:0.5'
    implementation 'com.mohistmc:tools:0.5.1'
    implementation 'com.mohistmc:librariesvault:1.20.2'
    implementation 'commons-lang:commons-lang:2.6-mohist'
}

neoDev {
    runs {
        configureEach {
            gameDirectory = layout.projectDir.dir("run/$name")
        }
        client {
            client()
        }
        server {
            server()
        }
        gameTestServer {
            type = "gameTestServer"
        }
        data {
            // We perform client and server datagen in a single clientData run to avoid
            // having to juggle two generated resources folders and two runs for no additional benefit.
            clientData()
            programArguments.addAll '--mod', 'neoforge', '--flat', '--all', '--validate',
                    '--existing', rootProject.file("src/main/resources").absolutePath,
                    '--output', rootProject.file("src/generated/resources").absolutePath
        }
    }
}

generateAccessTransformers {
    // Make all state shards public
    classGroup(
            'render state shard classes', PUBLIC,
            innerClassesOf('net/minecraft/client/renderer/RenderStateShard')
    )
    // Make all state shard fields public
    fieldGroup(
            'render state shards', PUBLIC,
            named('net/minecraft/client/renderer/RenderStateShard'),
            fieldsOfType(classesWithSuperclass('net/minecraft/client/renderer/RenderStateShard'))
    )

    // Make all block constructors public so they can be used by mods
    methodGroup(
            'block constructors', PUBLIC,
            classesWithSuperclass('net/minecraft/world/level/block/Block'),
            named('<init>')
    )
    // Make all particle constructors public so they can be used by mods
    methodGroup(
            'particle constructors', PUBLIC,
            classesWithSuperclass('net/minecraft/client/particle/Particle'),
            named('<init>')
    )

    // Make all criteria methods in the recipe provider protected so mods can use them
    methodGroup(
            'recipe criteria', PROTECTED,
            named('net/minecraft/data/recipes/RecipeProvider'),
            methodsReturning('net/minecraft/advancements/Criterion')
    )

    // getStepSound is package-private and abstract, so mods couldn't otherwise extend from AbstractSkeleton
    methodGroup(
            'skeleton step sound', PROTECTED,
            classesWithSuperclass('net/minecraft/world/entity/monster/AbstractSkeleton'),
            named('getStepSound')
    )

    // Make all noise generator setting factories public so mods can use them for custom dimensions
    methodGroup(
            'noise generator', PUBLIC,
            named('net/minecraft/world/level/levelgen/NoiseGeneratorSettings'),
            methodsReturning('net/minecraft/world/level/levelgen/NoiseGeneratorSettings')
    )

    fieldGroup(
            'biome effects builder', PROTECTED,
            named('net/minecraft/world/level/biome/BiomeSpecialEffects$Builder'),
            matchAny()
    )

    // Make all creative tab ids accessible
    fieldGroup(
            'creative tabs', PUBLIC,
            named('net/minecraft/world/item/CreativeModeTabs'),
            fieldsOfType(named('net/minecraft/resources/ResourceKey'))
    )
}

AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) project.components.findByName("java")
// Ensure the two default variants are not published, since they
// contain Minecraft classes
javaComponent.withVariantsFromConfiguration(configurations.apiElements) {
    it.skip()
}
javaComponent.withVariantsFromConfiguration(configurations.runtimeElements) {
    it.skip()
}

// Resolvable configurations only
configurations {
    modDevBundle {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom neoFormData
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "data"))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-bundle:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {} // Publish it
    }
    modDevConfig {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "data"))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-config:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {} // Publish it
    }
    installerJar {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EMBEDDED))
            // The installer targets JDK 8
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
        }
        outgoing {
            capability("net.neoforged:neoforge-installer:${project.version}")
        }
        // Publish it
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    universalJar {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, JavaVersion.current().majorVersion.toInteger())
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
        // Publish it
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevApiElements {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom libraries, moduleLibraries, userdevCompileOnly, neoFormDependencies
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
        }
        outgoing {
            capability("net.neoforged:neoforge-dependencies:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevRuntimeElements {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom libraries, moduleLibraries, neoFormDependencies
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability("net.neoforged:neoforge-dependencies:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevModulePath {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom moduleLibraries
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-module-path:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevTestFixtures {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom userdevTestFixtures
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-test-fixtures:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
}

processResources {
    inputs.property("version", project.version)

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    final version = project.version
    filesMatching("META-INF/neoforge.mods.toml") {
        expand([
                "global": [
                        "neoForgeVersion": version
                ]
        ])
    }
}