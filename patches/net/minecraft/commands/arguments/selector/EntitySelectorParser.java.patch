--- a/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -21,7 +_,6 @@
 import javax.annotation.Nullable;
 import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.advancements.critereon.WrappedMinMaxBounds;
-import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.arguments.selector.options.EntitySelectorOptions;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.level.ServerPlayer;
@@ -116,19 +_,15 @@
     private boolean hasAdvancements;
     private boolean usesSelectors;
 
+    public EntitySelectorParser(StringReader p_121218_) {
+        this(p_121218_, true);
+    }
+
     public EntitySelectorParser(StringReader p_121220_, boolean p_121221_) {
         this.reader = p_121220_;
         this.allowSelectors = p_121221_;
     }
 
-    public static <S> boolean allowSelectors(S p_353135_) {
-        if (p_353135_ instanceof SharedSuggestionProvider sharedsuggestionprovider && sharedsuggestionprovider.hasPermission(2)) {
-            return true;
-        }
-
-        return false;
-    }
-
     public EntitySelector getSelector() {
         AABB aabb;
         if (this.deltaX == null && this.deltaY == null && this.deltaZ == null) {
@@ -204,6 +_,14 @@
         };
     }
 
+    protected void parseSelector(boolean overridePermissions) throws CommandSyntaxException {
+        throw new RuntimeException("Not Implemented");
+    }
+
+    public EntitySelector parse(boolean overridePermissions) throws CommandSyntaxException {
+        throw new RuntimeException("Not Implemented");
+    }
+
     protected void parseSelector() throws CommandSyntaxException {
         this.usesSelectors = true;
         this.suggestions = this::suggestSelector;
@@ -481,6 +_,9 @@
             }
 
             this.reader.skip();
+            EntitySelector forgeSelector = net.neoforged.neoforge.common.command.EntitySelectorManager.parseSelector(this);
+            if (forgeSelector != null)
+                return forgeSelector;
             this.parseSelector();
         } else {
             this.parseNameOrUUID();
@@ -497,6 +_,7 @@
         p_121248_.suggest("@s", Component.translatable("argument.entity.selector.self"));
         p_121248_.suggest("@e", Component.translatable("argument.entity.selector.allEntities"));
         p_121248_.suggest("@n", Component.translatable("argument.entity.selector.nearestEntity"));
+        net.neoforged.neoforge.common.command.EntitySelectorManager.fillSelectorSuggestions(p_121248_);
     }
 
     private CompletableFuture<Suggestions> suggestNameOrSelector(SuggestionsBuilder p_121287_, Consumer<SuggestionsBuilder> p_121288_) {
