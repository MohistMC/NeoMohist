--- a/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -12,6 +_,7 @@
 import java.util.List;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
@@ -199,8 +_,10 @@
         };
     }
 
+    protected AtomicBoolean overridePermissions = new AtomicBoolean(true);
+
     protected void parseSelector() throws CommandSyntaxException {
-        this.usesSelectors = true;
+        this.usesSelectors = !overridePermissions.getAndSet(true);
         this.suggestions = this::suggestSelector;
         if (!this.reader.canRead()) {
             throw ERROR_MISSING_SELECTOR_TYPE.createWithContext(this.reader);
@@ -476,6 +_,9 @@
             }
 
             this.reader.skip();
+            EntitySelector forgeSelector = net.neoforged.neoforge.common.command.EntitySelectorManager.parseSelector(this);
+            if (forgeSelector != null)
+                return forgeSelector;
             this.parseSelector();
         } else {
             this.parseNameOrUUID();
@@ -485,6 +_,16 @@
         return this.getSelector();
     }
 
+    public EntitySelector parse(boolean overridePermissions) throws CommandSyntaxException {
+        this.overridePermissions.set(overridePermissions);
+        return parse();
+    }
+
+    protected void parseSelector(boolean overridePermissions) throws CommandSyntaxException {
+        this.usesSelectors = !overridePermissions;
+        parseSelector();
+    }
+
     private static void fillSelectorSuggestions(SuggestionsBuilder p_121248_) {
         p_121248_.suggest("@p", Component.translatable("argument.entity.selector.nearestPlayer"));
         p_121248_.suggest("@a", Component.translatable("argument.entity.selector.allPlayers"));
@@ -492,6 +_,7 @@
         p_121248_.suggest("@s", Component.translatable("argument.entity.selector.self"));
         p_121248_.suggest("@e", Component.translatable("argument.entity.selector.allEntities"));
         p_121248_.suggest("@n", Component.translatable("argument.entity.selector.nearestEntity"));
+        net.neoforged.neoforge.common.command.EntitySelectorManager.fillSelectorSuggestions(p_121248_);
     }
 
     private CompletableFuture<Suggestions> suggestNameOrSelector(SuggestionsBuilder p_121287_, Consumer<SuggestionsBuilder> p_121288_) {
