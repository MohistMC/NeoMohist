--- a/net/minecraft/world/level/block/Blocks.java
+++ b/net/minecraft/world/level/block/Blocks.java
@@ -754,7 +_,7 @@
     public static final Block RED_BED = register("red_bed", bed(DyeColor.RED));
     public static final Block BLACK_BED = register("black_bed", bed(DyeColor.BLACK));
     public static final Block POWERED_RAIL = register(
-        "powered_rail", new PoweredRailBlock(BlockBehaviour.Properties.of().noCollission().strength(0.7F).sound(SoundType.METAL))
+        "powered_rail", new PoweredRailBlock(BlockBehaviour.Properties.of().noCollission().strength(0.7F).sound(SoundType.METAL), true)
     );
     public static final Block DETECTOR_RAIL = register(
         "detector_rail", new DetectorRailBlock(BlockBehaviour.Properties.of().noCollission().strength(0.7F).sound(SoundType.METAL))
@@ -7635,15 +_,15 @@
         return p_341578_ -> p_341578_.getValue(BlockStateProperties.WATERLOGGED) ? MapColor.WATER : p_341621_;
     }
 
-    public static Boolean never(BlockState p_50779_, BlockGetter p_50780_, BlockPos p_50781_, EntityType<?> p_50782_) {
+    private static Boolean never(BlockState p_50779_, BlockGetter p_50780_, BlockPos p_50781_, EntityType<?> p_50782_) {
         return false;
     }
 
-    public static Boolean always(BlockState p_50810_, BlockGetter p_50811_, BlockPos p_50812_, EntityType<?> p_50813_) {
+    private static Boolean always(BlockState p_50810_, BlockGetter p_50811_, BlockPos p_50812_, EntityType<?> p_50813_) {
         return true;
     }
 
-    public static Boolean ocelotOrParrot(BlockState p_50822_, BlockGetter p_50823_, BlockPos p_50824_, EntityType<?> p_50825_) {
+    private static Boolean ocelotOrParrot(BlockState p_50822_, BlockGetter p_50823_, BlockPos p_50824_, EntityType<?> p_50825_) {
         return p_50825_ == EntityType.OCELOT || p_50825_ == EntityType.PARROT;
     }
 
@@ -7806,7 +_,8 @@
     static {
         for (Block block : BuiltInRegistries.BLOCK) {
             for (BlockState blockstate : block.getStateDefinition().getPossibleStates()) {
-                Block.BLOCK_STATE_REGISTRY.add(blockstate);
+                // Neo: comment out, it's done in NeoForgeRegistryCallbacks
+                //Block.BLOCK_STATE_REGISTRY.add(blockstate);
                 blockstate.initCache();
             }
 
