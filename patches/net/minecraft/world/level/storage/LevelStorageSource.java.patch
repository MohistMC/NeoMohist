--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -83,7 +_,7 @@
     public static final String ALLOWED_SYMLINKS_CONFIG_NAME = "allowed_symlinks.txt";
     private static final int UNCOMPRESSED_NBT_QUOTA = 104857600;
     private static final int DISK_SPACE_WARNING_THRESHOLD = 67108864;
-    public final Path baseDir;
+    private final Path baseDir;
     private final Path backupDir;
     final DataFixer fixerUpper;
     private final DirectoryValidator worldDirValidator;
@@ -407,7 +_,7 @@
 
     public class LevelStorageAccess implements AutoCloseable {
         final DirectoryLock lock;
-        public final LevelStorageSource.LevelDirectory levelDirectory;
+        final LevelStorageSource.LevelDirectory levelDirectory;
         private final String levelId;
         private final Map<LevelResource, Path> resources = Maps.newHashMap();
 
@@ -463,6 +_,18 @@
             }
         }
 
+        public void readAdditionalLevelSaveData(boolean fallback) {
+            checkLock();
+            Path path = fallback ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile();
+            try {
+                var tag = readLightweightData(path);
+                if (tag instanceof CompoundTag compoundTag)
+                    net.neoforged.neoforge.common.CommonHooks.readAdditionalLevelSaveData(compoundTag, this.levelDirectory);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", path, e);
+            }
+        }
+
         public PlayerDataStorage createPlayerStorage() {
             this.checkLock();
             return new PlayerDataStorage(this, LevelStorageSource.this.fixerUpper);
@@ -496,6 +_,7 @@
             CompoundTag compoundtag = p_78292_.createTag(p_78291_, p_78293_);
             CompoundTag compoundtag1 = new CompoundTag();
             compoundtag1.put("Data", compoundtag);
+            net.neoforged.neoforge.common.CommonHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
             this.saveLevelData(compoundtag1);
         }
 
@@ -515,6 +_,10 @@
 
         public Optional<Path> getIconFile() {
             return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+        }
+
+        public Path getWorldDir() {
+            return baseDir;
         }
 
         public void deleteLevel() throws IOException {
