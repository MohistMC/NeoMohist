--- a/net/minecraft/util/TickThrottler.java
+++ b/net/minecraft/util/TickThrottler.java
@@ -1,9 +_,11 @@
 package net.minecraft.util;
 
+import java.util.concurrent.atomic.AtomicInteger;
+
 public class TickThrottler {
     private final int incrementStep;
     private final int threshold;
-    private int count;
+    private final AtomicInteger count = new AtomicInteger(); // CraftBukkit - multithreaded field
 
     public TickThrottler(int p_374110_, int p_374074_) {
         this.incrementStep = p_374110_;
@@ -11,16 +_,24 @@
     }
 
     public void increment() {
-        this.count = this.count + this.incrementStep;
+        this.count.addAndGet(this.incrementStep); // CraftBukkit - use thread-safe field access instead
     }
 
     public void tick() {
-        if (this.count > 0) {
-            this.count--;
-        }
+        for (int val; (val = this.count.get()) > 0 && !count.compareAndSet(val, val - 1); ) ;
     }
 
     public boolean isUnderThreshold() {
-        return this.count < this.threshold;
+        // CraftBukkit start - use thread-safe field access instead
+        return this.count.get() < this.threshold;
+    }
+
+    public boolean isIncrementAndUnderThreshold() {
+        return isIncrementAndUnderThreshold(this.incrementStep, this.threshold);
+    }
+
+    public boolean isIncrementAndUnderThreshold(int incrementStep, int threshold) {
+        return this.count.addAndGet(incrementStep) < threshold;
+        // CraftBukkit end
     }
 }
