--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -40,7 +_,7 @@
     static final int PLAYER_TICKET_LEVEL = ChunkLevel.byStatus(FullChunkStatus.ENTITY_TICKING);
     private static final int INITIAL_TICKET_LIST_CAPACITY = 4;
     final Long2ObjectMap<ObjectSet<ServerPlayer>> playersPerChunk = new Long2ObjectOpenHashMap<>();
-    public final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap<>();
+    final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap<>();
     private final DistanceManager.ChunkTicketTracker ticketTracker = new DistanceManager.ChunkTicketTracker();
     private final DistanceManager.FixedPlayerDistanceChunkTracker naturalSpawnChunkCounter = new DistanceManager.FixedPlayerDistanceChunkTracker(8);
     private final TickingTracker tickingTicketsTracker = new TickingTracker();
@@ -52,7 +_,9 @@
     final LongSet ticketsToRelease = new LongOpenHashSet();
     final Executor mainThreadExecutor;
     private long ticketTickCounter;
-    public int simulationDistance = 10;
+    private int simulationDistance = 10;
+
+    private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
 
     protected DistanceManager(Executor p_140774_, Executor p_140775_) {
         ProcessorHandle<Runnable> processorhandle = ProcessorHandle.of("player ticket throttler", p_140775_::execute);
@@ -152,6 +_,10 @@
         if (p_140786_.getTicketLevel() < i) {
             this.ticketTracker.update(p_140785_, p_140786_.getTicketLevel(), true);
         }
+        if (p_140786_.isForceTicks()) {
+             SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.create(4));
+             tickets.addOrGet(ticket);
+        }
     }
 
     void removeTicket(long p_140819_, Ticket<?> p_140820_) {
@@ -164,6 +_,13 @@
         }
 
         this.ticketTracker.update(p_140819_, getTicketLevelAt(sortedarrayset), false);
+
+        if (p_140820_.isForceTicks()) {
+             SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+             if (tickets != null) {
+                  tickets.remove(p_140820_);
+             }
+        }
     }
 
     public <T> void addTicket(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
@@ -176,14 +_,20 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
-        Ticket<T> ticket = new Ticket<>(p_140841_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140843_, p_140844_);
+        addRegionTicket(p_140841_, p_140842_, p_140843_, p_140844_, false);
+    }
+    public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_, boolean forceTicks) {
+        Ticket<T> ticket = new Ticket<>(p_140841_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140843_, p_140844_, forceTicks);
         long i = p_140842_.toLong();
         this.addTicket(i, ticket);
         this.tickingTicketsTracker.addTicket(i, ticket);
     }
 
     public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
-        Ticket<T> ticket = new Ticket<>(p_140850_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140852_, p_140853_);
+        removeRegionTicket(p_140850_, p_140851_, p_140852_, p_140853_, false);
+    }
+    public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_, boolean forceTicks) {
+        Ticket<T> ticket = new Ticket<>(p_140850_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140852_, p_140853_, forceTicks);
         long i = p_140851_.toLong();
         this.removeTicket(i, ticket);
         this.tickingTicketsTracker.removeTicket(i, ticket);
@@ -269,6 +_,11 @@
         return this.ticketThrottler.getDebugStatus();
     }
 
+    public boolean shouldForceTicks(long chunkPos) {
+         SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+         return tickets != null && !tickets.isEmpty();
+    }
+
     private void dumpTickets(String p_143208_) {
         try (FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_))) {
             for (Entry<SortedArraySet<Ticket<?>>> entry : this.tickets.long2ObjectEntrySet()) {
@@ -322,7 +_,7 @@
         return !this.tickets.isEmpty();
     }
 
-    public class ChunkTicketTracker extends ChunkTracker {
+    class ChunkTicketTracker extends ChunkTracker {
         private static final int MAX_LEVEL = ChunkLevel.MAX_LEVEL + 1;
 
         public ChunkTicketTracker() {
@@ -368,7 +_,7 @@
         }
     }
 
-    public class FixedPlayerDistanceChunkTracker extends ChunkTracker {
+    class FixedPlayerDistanceChunkTracker extends ChunkTracker {
         protected final Long2ByteMap chunks = new Long2ByteOpenHashMap();
         protected final int maxDistance;
 
@@ -425,7 +_,7 @@
         }
     }
 
-    public class PlayerTicketTracker extends DistanceManager.FixedPlayerDistanceChunkTracker {
+    class PlayerTicketTracker extends DistanceManager.FixedPlayerDistanceChunkTracker {
         private int viewDistance;
         private final Long2IntMap queueLevels = Long2IntMaps.synchronize(new Long2IntOpenHashMap());
         private final LongSet toUpdate = new LongOpenHashSet();
