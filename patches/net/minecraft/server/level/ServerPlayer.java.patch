--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -121,12 +_,7 @@
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.entity.vehicle.Boat;
-import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.inventory.ContainerListener;
-import net.minecraft.world.inventory.ContainerSynchronizer;
-import net.minecraft.world.inventory.HorseInventoryMenu;
-import net.minecraft.world.inventory.ResultSlot;
-import net.minecraft.world.inventory.Slot;
+import net.minecraft.world.inventory.*;
 import net.minecraft.world.item.ComplexItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemCooldowns;
@@ -160,6 +_,9 @@
 import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.slf4j.Logger;
 
 public class ServerPlayer extends Player {
@@ -252,6 +_,10 @@
         }
 
         private void broadcastDataValue(AbstractContainerMenu p_143455_, int p_143456_, int p_143457_) {
+            if (ServerPlayer.this.connection.hasChannel(net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload.TYPE)) {
+                ServerPlayer.this.connection.send(new net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload((byte) p_143455_.containerId, (short) p_143456_, p_143457_));
+                return;
+            }
             ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(p_143455_.containerId, p_143456_, p_143457_));
         }
     };
@@ -276,6 +_,21 @@
     public final Object object;
     private int containerCounter;
     public boolean wonGame;
+    // CraftBukkit start
+    public CraftPlayer.TransferCookieConnection transferCookieConnection;
+    public String displayName;
+    public Component listName;
+    public org.bukkit.Location compassTarget;
+    public int newExp = 0;
+    public int newLevel = 0;
+    public int newTotalExp = 0;
+    public boolean keepLevel = false;
+    public double maxHealthCache;
+    public boolean joining = true;
+    public boolean sentListPacket = false;
+    public String kickLeaveMessage = null; // SPIGOT-3034: Forward leave message to PlayerQuitEvent
+    // CraftBukkit end
+
 
     public ServerPlayer(MinecraftServer p_254143_, ServerLevel p_254435_, GameProfile p_253651_, ClientInformation p_301997_) {
         super(p_254435_, p_254435_.getSharedSpawnPos(), p_254435_.getSharedSpawnAngle(), p_253651_);
@@ -289,6 +_,81 @@
         this.object = null;
     }
 
+    // Use method to resend items in hands in case of client desync, because the item use got cancelled.
+    // For example, when cancelling the leash event
+    public void resendItemInHands() {
+        containerMenu.findSlot(getInventory(), getInventory().selected).ifPresent(s -> {
+            containerSynchronizer.sendSlotChange(containerMenu, s, getMainHandItem());
+        });
+        containerSynchronizer.sendSlotChange(inventoryMenu, InventoryMenu.SHIELD_SLOT, getOffhandItem());
+    }
+
+    // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+    // If this is an issue, PRs are welcome
+    public final BlockPos getSpawnPoint(ServerLevel worldserver) {
+        BlockPos blockposition = worldserver.getSharedSpawnPos();
+
+        if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
+            int i = Math.max(0, this.server.getSpawnRadius(worldserver));
+            int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+
+            if (j < i) {
+                i = j;
+            }
+
+            if (j <= 1) {
+                i = 1;
+            }
+
+            long k = (long) (i * 2 + 1);
+            long l = k * k;
+            int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+            int j1 = this.getCoprime(i1);
+            int k1 = RandomSource.create().nextInt(i1);
+
+            for (int l1 = 0; l1 < i1; ++l1) {
+                int i2 = (k1 + j1 * l1) % i1;
+                int j2 = i2 % (i * 2 + 1);
+                int k2 = i2 / (i * 2 + 1);
+                BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(worldserver, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i);
+
+                if (blockposition1 != null) {
+                    return blockposition1;
+                }
+            }
+        }
+
+        return blockposition;
+    }
+    // CraftBukkit end
+
+    // CraftBukkit start - World fallback code, either respawn location or global spawn
+    public void spawnIn(Level world) {
+        this.setLevel(world);
+        if (world == null) {
+            this.unsetRemoved();
+            Vec3 position = null;
+            if (this.respawnDimension != null) {
+                world = this.server.getLevel(this.respawnDimension);
+                if (world != null && this.getRespawnPosition() != null) {
+                    position = ServerPlayer.findRespawnAndUseSpawnBlock((ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false).map(ServerPlayer.RespawnPosAngle::position).orElse(null);
+                }
+            }
+            if (world == null || position == null) {
+                world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+                position = Vec3.atCenterOf(world.getSharedSpawnPos());
+            }
+            this.setLevel(world);
+            this.setPos(position);
+        }
+        this.gameMode.setLevel((ServerLevel) world);
+    }
+    // CraftBukkit end
+
+    public int nextContainerCounterInt() { // CraftBukkit - void -> int
+        return containerCounter; // CraftBukkit
+    }
+
     @Override
     public BlockPos adjustSpawnLocation(ServerLevel p_352206_, BlockPos p_352202_) {
         AABB aabb = this.getDimensions(Pose.STANDING).makeBoundingBox(Vec3.ZERO);
@@ -606,6 +_,11 @@
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
+            if (this.getAbilities().flying && !this.mayFly()) {
+                this.getAbilities().flying = false;
+                this.onUpdateAbilities();
+            }
+
             if (this.tickCount % 20 == 0) {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
@@ -657,6 +_,7 @@
     @Override
     public void die(DamageSource p_9035_) {
         this.gameEvent(GameEvent.ENTITY_DIE);
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_9035_)) return;
         boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (flag) {
             Component component = this.getCombatTracker().getDeathMessage();
@@ -826,7 +_,7 @@
             return BedBlock.findStandUpPosition(EntityType.PLAYER, p_348505_, p_348607_, blockstate.getValue(BedBlock.FACING), p_348481_)
                 .map(p_348148_ -> ServerPlayer.RespawnPosAngle.of(p_348148_, p_348607_));
         } else if (!p_348513_) {
-            return Optional.empty();
+            return blockstate.getRespawnPosition(EntityType.PLAYER, p_348505_, p_348607_, p_348481_);
         } else {
             boolean flag = block.isPossibleToRespawnInThis(blockstate);
             BlockState blockstate1 = p_348505_.getBlockState(p_348607_.above());
@@ -870,6 +_,7 @@
                 p_350472_.postDimensionTransition().onTransition(this);
                 return this;
             } else {
+                if (!net.neoforged.neoforge.common.CommonHooks.onTravelToDimension(this, p_350472_.newLevel().dimension())) return null;
                 this.isChangingDimension = true;
                 LevelData leveldata = serverlevel.getLevelData();
                 this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(serverlevel), (byte)3));
@@ -877,7 +_,7 @@
                 PlayerList playerlist = this.server.getPlayerList();
                 playerlist.sendPlayerPermissionLevel(this);
                 serverlevel1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-                this.unsetRemoved();
+                this.revive();
                 serverlevel1.getProfiler().push("moving");
                 if (resourcekey == Level.OVERWORLD && serverlevel.dimension() == Level.NETHER) {
                     this.enteredNetherPosition = this.position();
@@ -895,10 +_,12 @@
                 playerlist.sendLevelInfo(this, serverlevel);
                 playerlist.sendAllPlayerInfo(this);
                 playerlist.sendActivePlayerEffects(this);
+                // TODO 1.21: Play custom teleport sound
                 p_350472_.postDimensionTransition().onTransition(this);
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
+                net.neoforged.neoforge.event.EventHooks.firePlayerChangedDimensionEvent(this, resourcekey, p_350472_.newLevel().dimension());
                 return this;
             }
         }
@@ -934,6 +_,15 @@
 
     @Override
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
+        // Neo: Encapsulate the vanilla check logic to supply to the CanPlayerSleepEvent
+        var vanillaResult = ((java.util.function.Supplier<Either<BedSleepingProblem, Unit>>) () -> {
+        // Guard against modded beds that may not have the FACING property.
+        // We just return success (Unit) here. Modders will need to implement conditions in the CanPlayerSleepEvent
+        if (!this.level().getBlockState(p_9115_).hasProperty(HorizontalDirectionalBlock.FACING)) {
+            return Either.right(Unit.INSTANCE);
+        }
+
+        // Start vanilla code
         Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
         if (this.isSleeping() || !this.isAlive()) {
             return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
@@ -962,7 +_,21 @@
                         return Either.left(Player.BedSleepingProblem.NOT_SAFE);
                     }
                 }
-
+        // End vanilla code
+            }
+        }
+        return Either.right(Unit.INSTANCE);
+        }).get();
+
+        // Fire the event. Return the error if one exists after the event, otherwise use the vanilla logic to start sleeping.
+        vanillaResult = net.neoforged.neoforge.event.EventHooks.canPlayerStartSleeping(this, p_9115_, vanillaResult);
+        if (vanillaResult.left().isPresent()) {
+            return vanillaResult;
+        }
+
+        {
+            {
+                // Start vanilla code
                 Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight(p_9029_ -> {
                     this.awardStat(Stats.SLEEP_IN_BED);
                     CriteriaTriggers.SLEPT_IN_BED.trigger(this);
@@ -984,6 +_,7 @@
     }
 
     private boolean bedInRange(BlockPos p_9117_, Direction p_9118_) {
+        if (p_9118_ == null) return false;
         return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
     }
 
@@ -1074,11 +_,19 @@
 
     @Override
     public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
+        return openMenu(p_9033_, (java.util.function.Consumer<net.minecraft.network.RegistryFriendlyByteBuf>) null);
+    }
+
+    @Override
+    public OptionalInt openMenu(@Nullable MenuProvider p_9033_, @Nullable java.util.function.Consumer<net.minecraft.network.RegistryFriendlyByteBuf> extraDataWriter) {
         if (p_9033_ == null) {
             return OptionalInt.empty();
         } else {
             if (this.containerMenu != this.inventoryMenu) {
+                if (p_9033_.shouldTriggerClientSideContainerClosingOnOpen())
                 this.closeContainer();
+                else
+                    this.doCloseContainer();
             }
 
             this.nextContainerCounter();
@@ -1090,10 +_,16 @@
 
                 return OptionalInt.empty();
             } else {
+                if (extraDataWriter == null) {
                 this.connection
                     .send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
+                } else {
+                    this.connection
+                        .send(new net.neoforged.neoforge.network.payload.AdvancedOpenScreenPayload(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName(), net.neoforged.neoforge.common.util.FriendlyByteBufUtil.writeCustomData(extraDataWriter, registryAccess())));
+                }
                 this.initMenu(abstractcontainermenu);
                 this.containerMenu = abstractcontainermenu;
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1115,6 +_,7 @@
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, i, p_9059_.getId()));
         this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_, i);
         this.initMenu(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
     }
 
     @Override
@@ -1143,6 +_,7 @@
     public void doCloseContainer() {
         this.containerMenu.removed(this);
         this.inventoryMenu.transferState(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Close(this, this.containerMenu));
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1375,6 +_,15 @@
         this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
         this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
         this.setLastDeathLocation(p_9016_.getLastDeathLocation());
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        CompoundTag old = p_9016_.getPersistentData();
+        if (old.contains(PERSISTED_NBT_TAG))
+             getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+        net.neoforged.neoforge.event.EventHooks.onPlayerClone(this, p_9016_, !p_9017_);
+        this.tabListHeader = p_9016_.tabListHeader;
+        this.tabListFooter = p_9016_.tabListFooter;
     }
 
     @Override
@@ -1469,6 +_,8 @@
 
     public boolean setGameMode(GameType p_143404_) {
         boolean flag = this.isSpectator();
+        p_143404_ = net.neoforged.neoforge.common.CommonHooks.onChangeGameType(this, this.gameMode.getGameModeForPlayer(), p_143404_);
+        if (p_143404_ == null) return false;
         if (!this.gameMode.changeGameModeForPlayer(p_143404_)) {
             return false;
         } else {
@@ -1617,6 +_,7 @@
     public void setCamera(@Nullable Entity p_9214_) {
         Entity entity = this.getCamera();
         this.camera = (Entity)(p_9214_ == null ? this : p_9214_);
+        while (this.camera instanceof net.neoforged.neoforge.entity.PartEntity<?> partEntity) this.camera = partEntity.getParent(); // Neo: fix MC-46486
         if (entity != this.camera) {
             if (this.camera.level() instanceof ServerLevel serverlevel) {
                 this.teleportTo(serverlevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot());
@@ -1653,7 +_,11 @@
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        if (!this.hasTabListName) {
+            this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+            this.hasTabListName = true;
+        }
+        return this.tabListDisplayName;
     }
 
     @Override
@@ -1710,6 +_,7 @@
     }
 
     public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPlayerSpawnSet(this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9162_)) return;
         if (p_9160_ != null) {
             boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
             if (p_9163_ && !flag) {
@@ -1767,6 +_,8 @@
         if (itementity == null) {
             return null;
         } else {
+            if (captureDrops() != null) captureDrops().add(itementity);
+            else
             this.level().addFreshEntity(itementity);
             ItemStack itemstack = itementity.getItem();
             if (p_9087_) {
@@ -1781,6 +_,75 @@
         }
     }
 
+    /**
+     * Returns the language last reported by the player as their local language.
+     * Defaults to en_us if the value is unknown.
+     */
+    public String getLanguage() {
+        return this.language;
+    }
+
+    private Component tabListHeader = Component.empty();
+    private Component tabListFooter = Component.empty();
+
+    public Component getTabListHeader() {
+         return this.tabListHeader;
+    }
+
+    /**
+     * Set the tab list header while preserving the footer.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeader(final Component header) {
+         this.setTabListHeaderFooter(header, this.tabListFooter);
+    }
+
+    public Component getTabListFooter() {
+         return this.tabListFooter;
+    }
+
+    /**
+     * Set the tab list footer while preserving the header.
+     *
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListFooter(final Component footer) {
+         this.setTabListHeaderFooter(this.tabListHeader, footer);
+    }
+
+    /**
+     * Set the tab list header and footer at once.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeaderFooter(final Component header, final Component footer) {
+         if (java.util.Objects.equals(header, this.tabListHeader)
+              && java.util.Objects.equals(footer, this.tabListFooter)) {
+              return;
+         }
+
+         this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+         this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+         this.connection.send(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+    }
+
+    // We need this as tablistDisplayname may be null even if the event was fired.
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
+    /**
+     * Force the name displayed in the tab list to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+     */
+    public void refreshTabListName() {
+        Component oldName = this.tabListDisplayName;
+        this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+        if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+            this.getServer().getPlayerList().broadcastAll(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+
     public TextFilter getTextFilter() {
         return this.textFilter;
     }
@@ -1841,9 +_,12 @@
 
     public boolean drop(boolean p_182295_) {
         Inventory inventory = this.getInventory();
+        ItemStack selected = inventory.getSelected();
+        if (selected.isEmpty() || !selected.onDroppedByPlayer(this)) return false;
+        if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_182295_ || selected.getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the serverside
         ItemStack itemstack = inventory.removeFromSelected(p_182295_);
         this.containerMenu.findSlot(inventory, inventory.selected).ifPresent(p_287377_ -> this.containerMenu.setRemoteSlot(p_287377_, inventory.getSelected()));
-        return this.drop(itemstack, false, true) != null;
+        return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, itemstack, true) != null;
     }
 
     public boolean allowsListing() {
