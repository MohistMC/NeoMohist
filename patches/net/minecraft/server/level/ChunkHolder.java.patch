--- a/net/minecraft/server/level/ChunkHolder.java
+++ b/net/minecraft/server/level/ChunkHolder.java
@@ -36,7 +_,7 @@
     private volatile CompletableFuture<ChunkResult<LevelChunk>> fullChunkFuture = UNLOADED_LEVEL_CHUNK_FUTURE;
     private volatile CompletableFuture<ChunkResult<LevelChunk>> tickingChunkFuture = UNLOADED_LEVEL_CHUNK_FUTURE;
     private volatile CompletableFuture<ChunkResult<LevelChunk>> entityTickingChunkFuture = UNLOADED_LEVEL_CHUNK_FUTURE;
-    public int oldTicketLevel;
+    private int oldTicketLevel;
     private int ticketLevel;
     private int queueLevel;
     private boolean hasChangedSections;
@@ -45,7 +_,7 @@
     private final BitSet skyChangedLightSectionFilter = new BitSet();
     private final LevelLightEngine lightEngine;
     private final ChunkHolder.LevelChangeListener onLevelChange;
-    public final ChunkHolder.PlayerProvider playerProvider;
+    private final ChunkHolder.PlayerProvider playerProvider;
     private boolean wasAccessibleSinceLastSave;
     private CompletableFuture<?> pendingFullStateConfirmation = CompletableFuture.completedFuture(null);
     private CompletableFuture<?> sendSync = CompletableFuture.completedFuture(null);
@@ -69,6 +_,14 @@
         this.queueLevel = this.oldTicketLevel;
         this.setTicketLevel(p_142987_);
         this.changedBlocksPerSection = new ShortSet[p_142988_.getSectionsCount()];
+    }
+
+    public LevelChunk getFullChunkNow() {
+        throw new IllegalStateException("Not implemented");
+    }
+
+    public LevelChunk getFullChunkNowUnchecked() {
+        throw new IllegalStateException("Not implemented");
     }
 
     public CompletableFuture<ChunkResult<LevelChunk>> getTickingChunkFuture() {
