--- a/net/minecraft/server/ServerAdvancementManager.java
+++ b/net/minecraft/server/ServerAdvancementManager.java
@@ -28,8 +_,8 @@
 
 public class ServerAdvancementManager extends SimpleJsonResourceReloadListener {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Gson GSON = new GsonBuilder().create();
-    public Map<ResourceLocation, AdvancementHolder> advancements = Map.of();
+    private static final Gson GSON = new GsonBuilder().create();
+    private Map<ResourceLocation, AdvancementHolder> advancements = Map.of();
     private AdvancementTree tree = new AdvancementTree();
     private final HolderLookup.Provider registries;
 
@@ -39,11 +_,15 @@
     }
 
     protected void apply(Map<ResourceLocation, JsonElement> p_136034_, ResourceManager p_136035_, ProfilerFiller p_136036_) {
-        RegistryOps<JsonElement> registryops = this.registries.createSerializationContext(JsonOps.INSTANCE);
+        RegistryOps<JsonElement> registryops = this.makeConditionalOps(); // Neo: add condition context
         Builder<ResourceLocation, AdvancementHolder> builder = ImmutableMap.builder();
         p_136034_.forEach((p_337529_, p_337530_) -> {
             try {
-                Advancement advancement = Advancement.CODEC.parse(registryops, p_337530_).getOrThrow(JsonParseException::new);
+                Advancement advancement = net.neoforged.neoforge.common.conditions.ICondition.getWithWithConditionsCodec(Advancement.CONDITIONAL_CODEC, registryops, p_337530_).orElse(null);
+                if (advancement == null) {
+                    LOGGER.debug("Skipping loading advancement {} as its conditions were not met", p_337529_);
+                    return;
+                }
                 this.validate(p_337529_, advancement);
                 builder.put(p_337529_, new AdvancementHolder(p_337529_, advancement));
             } catch (Exception exception) {
