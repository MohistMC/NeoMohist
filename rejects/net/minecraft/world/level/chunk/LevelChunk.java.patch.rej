++++ REJECTED HUNK: 4
@@ -322,6 +323,10 @@
     @Nullable
     public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
         BlockEntity blockentity = this.blockEntities.get(p_62868_);
+        if (blockentity != null && blockentity.isRemoved()) {
+            blockEntities.remove(p_62868_);
+            blockentity = null;
+        }
         if (blockentity == null) {
             CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
             if (compoundtag != null) {
++++ END HUNK

++++ REJECTED HUNK: 5
@@ -339,9 +344,6 @@
                     this.addAndRegisterBlockEntity(blockentity);
                 }
             }
-        } else if (blockentity.isRemoved()) {
-            this.blockEntities.remove(p_62868_);
-            return null;
         }
 
         return blockentity;
++++ END HUNK

++++ REJECTED HUNK: 6
@@ -355,6 +357,7 @@
             }
 
             this.updateBlockEntityTicker(p_156391_);
+            this.level.addFreshBlockEntities(java.util.List.of(p_156391_));
         }
     }
 
++++ END HUNK

++++ REJECTED HUNK: 7
@@ -398,6 +401,7 @@
             BlockEntity blockentity = this.blockEntities.put(blockpos.immutable(), p_156374_);
             if (blockentity != null && blockentity != p_156374_) {
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(blockpos);
             }
         }
     }
++++ END HUNK

++++ REJECTED HUNK: 8
@@ -407,9 +411,14 @@
     public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_, HolderLookup.Provider p_323699_) {
         BlockEntity blockentity = this.getBlockEntity(p_62932_);
         if (blockentity != null && !blockentity.isRemoved()) {
+            try {
             CompoundTag compoundtag1 = blockentity.saveWithFullMetadata(this.level.registryAccess());
             compoundtag1.putBoolean("keepPacked", false);
             return compoundtag1;
+            } catch (Exception e) {
+                LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+                return null;
+            }
         } else {
             CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
             if (compoundtag != null) {
++++ END HUNK

++++ REJECTED HUNK: 9
@@ -431,6 +440,7 @@
                 }
 
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(p_62919_);
             }
         }
 
++++ END HUNK

++++ REJECTED HUNK: 10
@@ -491,7 +501,7 @@
         p_187974_.accept((p_338077_, p_338078_, p_338079_) -> {
             BlockEntity blockentity = this.getBlockEntity(p_338077_, LevelChunk.EntityCreationType.IMMEDIATE);
             if (blockentity != null && p_338079_ != null && blockentity.getType() == p_338078_) {
-                blockentity.loadWithComponents(p_338079_, this.level.registryAccess());
+                blockentity.handleUpdateTag(p_338079_, this.level.registryAccess());
             }
         });
     }
++++ END HUNK

++++ REJECTED HUNK: 11
@@ -599,6 +609,7 @@
     }
 
     public void clearAllBlockEntities() {
+        this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
         this.blockEntities.values().forEach(BlockEntity::setRemoved);
         this.blockEntities.clear();
         this.tickersInLevel.values().forEach(p_187966_ -> p_187966_.rebind(NULL_TICKER));
++++ END HUNK

++++ REJECTED HUNK: 12
@@ -606,6 +617,7 @@
     }
 
     public void registerAllBlockEntitiesAfterLevelLoad() {
+        this.level.addFreshBlockEntities(this.blockEntities.values());
         this.blockEntities.values().forEach(p_187988_ -> {
             if (this.level instanceof ServerLevel serverlevel) {
                 this.addGameEventListener(p_187988_, serverlevel);
++++ END HUNK

++++ REJECTED HUNK: 13
@@ -657,6 +669,15 @@
         return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
     }
 
+    // FORGE START
+    private final net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager auxLightManager = new net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager(this);
+
+    @Override
+    public net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager getAuxLightManager(ChunkPos pos) {
+        return auxLightManager;
+    }
+    // FORGE END
+
     class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
++++ END HUNK

++++ REJECTED HUNK: 14
@@ -674,6 +695,7 @@
                 if (LevelChunk.this.isTicking(blockpos)) {
                     try {
                         ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                         profilerfiller.push(this::getType);
                         BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                         if (this.blockEntity.getType().isValid(blockstate)) {
++++ END HUNK

++++ REJECTED HUNK: 15
@@ -695,7 +717,15 @@
                         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                         this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                        if (net.neoforged.neoforge.common.NeoForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                            LOGGER.error("{}", crashreport.getFriendlyReport(net.minecraft.ReportType.CRASH));
+                            blockEntity.setRemoved();
+                            LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                        } else
                         throw new ReportedException(crashreport);
+                    } finally {
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackEnd(blockEntity);
                     }
                 }
             }
++++ END HUNK
