++++ REJECTED HUNK: 3
@@ -61,6 +63,8 @@
     }
 
     protected void loadAdditional(CompoundTag p_338466_, HolderLookup.Provider p_338445_) {
+        if (p_338466_.contains("NeoForgeData", net.minecraft.nbt.Tag.TAG_COMPOUND)) this.customPersistentData = p_338466_.getCompound("NeoForgeData");
+        if (p_338466_.contains(ATTACHMENTS_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND)) deserializeAttachments(p_338445_, p_338466_.getCompound(ATTACHMENTS_NBT_KEY));
     }
 
     public final void loadWithComponents(CompoundTag p_338356_, HolderLookup.Provider p_338558_) {
++++ END HUNK

++++ REJECTED HUNK: 4
@@ -76,6 +80,9 @@
     }
 
     protected void saveAdditional(CompoundTag p_187471_, HolderLookup.Provider p_323635_) {
+        if (this.customPersistentData != null) p_187471_.put("NeoForgeData", this.customPersistentData.copy());
+        var attachmentsTag = serializeAttachments(p_323635_);
+        if (attachmentsTag != null) p_187471_.put(ATTACHMENTS_NBT_KEY, attachmentsTag);
     }
 
     public final CompoundTag saveWithFullMetadata(HolderLookup.Provider p_323767_) {
++++ END HUNK

++++ REJECTED HUNK: 5
@@ -205,10 +212,14 @@
 
     public void setRemoved() {
         this.remove = true;
+        this.invalidateCapabilities();
+        requestModelDataUpdate();
     }
 
     public void clearRemoved() {
         this.remove = false;
+        // Neo: invalidate capabilities on block entity placement
+        invalidateCapabilities();
     }
 
     public boolean triggerEvent(int p_58889_, int p_58890_) {
++++ END HUNK

++++ REJECTED HUNK: 6
@@ -231,6 +242,27 @@
         return this.type;
     }
 
+    @Override
+    public CompoundTag getPersistentData() {
+        if (this.customPersistentData == null)
+            this.customPersistentData = new CompoundTag();
+        return this.customPersistentData;
+    }
+
+    @Override
+    @Nullable
+    public final <T> T setData(net.neoforged.neoforge.attachment.AttachmentType<T> type, T data) {
+        setChanged();
+        return super.setData(type, data);
+    }
+
+    @Override
+    @Nullable
+    public final <T> T removeData(net.neoforged.neoforge.attachment.AttachmentType<T> type) {
+        setChanged();
+        return super.removeData(type);
+    }
+
     @Deprecated
     public void setBlockState(BlockState p_155251_) {
         this.blockState = p_155251_;
++++ END HUNK

++++ REJECTED HUNK: 7
@@ -309,5 +341,15 @@
         <T> T get(DataComponentType<T> p_338658_);
 
         <T> T getOrDefault(DataComponentType<? extends T> p_338573_, T p_338734_);
+
+        // Neo: Utility for modded component types, to remove the need to invoke '.value()'
+        @Nullable
+        default <T> T get(java.util.function.Supplier<? extends DataComponentType<T>> componentType) {
+            return get(componentType.get());
+        }
+
+        default <T> T getOrDefault(java.util.function.Supplier<? extends DataComponentType<T>> componentType, T value) {
+            return getOrDefault(componentType.get(), value);
+        }
     }
 }
++++ END HUNK
